- Role::ROLES.each do |key, value|
  h4= value.pluralize
  | Add users to role this role
  br
  - for user in User.unassigned_to(@project)
    = builder.fields_for :roles, builder.object.roles.build  do |builder|
      = content_tag(:span, class: "checkbox_#{user.id}") do
        = builder.check_box :user_id, {}, user.id, nil
        = builder.label user.name, class: 'checkbox inline', style: 'margin-right:10px;'
      = builder.hidden_field :role_id, value: key
      / We can rely on a hidden field here because this data is only able to be manipulated by either a project manager or an administrator
  br
  br
  - if @project.users.for_role(key).present?
    table class="table table-striped table-bordered user_list"
      thead
        tr
          th Name
          th Email
          th &nbsp;
      tbody
        - @project.users.for_role(key).each do |user|
          tr
            td= user.name
            td= user.email
            td= link_to 'Remove User', project_management_remove_user_from_project_path(@project, user_id: user.id, project_id: @project.id), class: 'btn btn-small btn-warning', method: :delete, confirm: 'Are you sure you want to remove this user?'

javascript:
  $('input[id^="project_roles_attributes"]').click(function() {

    var hide_class = $(this).attr('value');

    if($(this).attr('checked')) {
      $(this).parent().addClass("current");
      $(".checkbox_"+hide_class).hide();
      $(".current").show();
    } else {
      $(this).parent().removeClass("current");
      $(".checkbox_"+hide_class).show();
     }
   });